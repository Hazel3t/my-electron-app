# This workflow will build an electron application using npm and then publish it to GitHub Packages when a release is created.
# It updates the version in package.json for each release with a pre-release identifier based on the current date,
# and uploads the built artifacts (in this case, .dmg files) as an upload artifact.
# For more information, see: https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md

name: Publish .dmg Installer to Release

on:
  release:
    types: [created]

permissions: write-all

jobs:
  build:
    name: Publish Release
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: macos-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Set package.json version to match the release tag
      - name: Set package.json Version
        id: set_version
        run: |
          echo "Extracting tag name..."
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Tag name: $TAG_NAME"

          # Remove leading 'v' if present (e.g., v1.0.8 or v1.0.8-0)
          VERSION=${TAG_NAME#v}
          echo "Setting package.json version to: $VERSION"

          # Update package.json without creating a git commit/tag
          npm version "$VERSION" --no-git-tag-version --preid=$(date +%Y%m%d)

          # Export the version for later steps if needed
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 4: Install dependencies using npm CI
      - name: Install Dependencies
        run: npm ci

      # Step 5: Build the Electron application
      - name: Build Application
        run: npm run build

      # Step 6: Upload the generated .dmg artifact (optional)
      - name: Upload .dmg Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MongoDB Query Executor
          path: ./release/**/*.dmg
