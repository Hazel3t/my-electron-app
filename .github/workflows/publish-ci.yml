name: Publish .dmg Installer to Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      TAG_NAME:
        description: 'Tag name for the release'
        required: true

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      tag_name: ${{ steps.set_tag.outputs.tag_name }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set TAG_NAME
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.TAG_NAME }}" >> $GITHUB_ENV
            echo "tag_name=${{ github.event.inputs.TAG_NAME }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
            echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set version in package.json
        id: set_version
        run: |
          VERSION="${{ env.TAG_NAME }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        run: |
          npm version "${{ steps.set_version.outputs.VERSION }}" --no-git-tag-version

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run build

      - name: Remove blockmap files
        run: find ./release -type f -name '*.blockmap' -delete

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${{ env.TAG_NAME }}
          RELEASE_NAME="Release ${TAG_NAME}"
          BODY="Automatic release of version ${TAG_NAME}"
          
          # Check if release exists
          if gh release view "$TAG_NAME" > /dev/null 2>&1; then
            echo "Release $TAG_NAME already exists. Updating..."
            gh release edit "$TAG_NAME" --title "$RELEASE_NAME" --notes "$BODY"
          else
            echo "Creating release $TAG_NAME"
            gh release create "$TAG_NAME" --title "$RELEASE_NAME" --notes "$BODY"
          fi

      - name: Get DMG file path
        id: get_dmg_path
        run: |
          DMG_FILE=$(find ./release -type f -name "*.dmg")
          echo "dmg_path=$DMG_FILE" >> $GITHUB_OUTPUT

      - name: Upload .dmg to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DMG_PATH="${{ steps.get_dmg_path.outputs.dmg_path }}"
          TAG_NAME=${{ env.TAG_NAME }}
          ASSET_NAME="MongoDB_Query_Executor_${TAG_NAME}.dmg"
          
          # Upload the asset, overwrite if it exists
          gh release upload "$TAG_NAME" "$DMG_PATH" --clobber --name "$ASSET_NAME"

      - name: Confirm Upload
        if: success()
        run: echo "Release created and .dmg uploaded successfully."