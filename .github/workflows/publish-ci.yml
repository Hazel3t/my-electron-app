name: Publish .dmg Installer to Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      TAG_NAME:
        description: 'Tag name for the release'
        required: true

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      tag_name: ${{ steps.set_tag.outputs.tag_name }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set TAG_NAME
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.TAG_NAME }}" >> $GITHUB_ENV
            echo "tag_name=${{ github.event.inputs.TAG_NAME }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
            echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set version in package.json
        id: set_version
        run: |
          VERSION="${{ env.TAG_NAME }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        run: |
          npm version "${{ steps.set_version.outputs.VERSION }}" --no-git-tag-version

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run build

      - name: Remove blockmap files
        run: find ./release -type f -name '*.blockmap' -delete

      - name: Check if release exists
        id: check_release
        run: |
          TAG_NAME_NO_V=$(echo "${{ env.TAG_NAME }}" | sed 's/^v//')
          RELEASE_ID=$(gh release view "$TAG_NAME_NO_V" --json id --jq .id 2>/dev/null)
          if [ -z "$RELEASE_ID" ]; then
            echo "release_exists=false" >> $GITHUB_OUTPUT
          else
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release if not exists
        if: steps.check_release.outputs.release_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload .dmg artifact
        uses: actions/upload-artifact@v4
        with:
          name: dmgs
          path: ./release/**/*.dmg

      - name: Get DMG file path
        id: get_dmg_path
        run: |
          DMG_FILE=$(find ./release -type f -name "*.dmg")
          echo "dmg_path=$DMG_FILE" >> $GITHUB_OUTPUT

      - name: Upload .dmg to Release
        if: steps.check_release.outputs.release_exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_dmg_path.outputs.dmg_path }}
          asset_name: MongoDB_Query_Executor_${{ env.TAG_NAME }}.dmg
          asset_content_type: application/octet-stream

      - name: Update release if it exists
        if: steps.check_release.outputs.release_exists == 'true'
        id: update_release
        run: |
          gh release upload ${{ steps.get_dmg_path.outputs.dmg_path }} --repo ${{ github.repository }} --release-id ${{ steps.check_release.outputs.release_id }}  --name MongoDB_Query_Executor_${{ env.TAG_NAME }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Confirm Upload
        if: success()
        run: echo "Release created/updated and .dmg uploaded successfully."